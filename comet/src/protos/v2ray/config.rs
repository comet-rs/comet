// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Domain {
    // message fields
    pub field_type: Domain_Type,
    pub value: ::std::string::String,
    pub attribute: ::protobuf::RepeatedField<Domain_Attribute>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Domain {
    fn default() -> &'a Domain {
        <Domain as ::protobuf::Message>::default_instance()
    }
}

impl Domain {
    pub fn new() -> Domain {
        ::std::default::Default::default()
    }

    // .v2ray.core.app.router.Domain.Type type = 1;


    pub fn get_field_type(&self) -> Domain_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Domain_Type::Plain;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Domain_Type) {
        self.field_type = v;
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // repeated .v2ray.core.app.router.Domain.Attribute attribute = 3;


    pub fn get_attribute(&self) -> &[Domain_Attribute] {
        &self.attribute
    }
    pub fn clear_attribute(&mut self) {
        self.attribute.clear();
    }

    // Param is passed by value, moved
    pub fn set_attribute(&mut self, v: ::protobuf::RepeatedField<Domain_Attribute>) {
        self.attribute = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attribute(&mut self) -> &mut ::protobuf::RepeatedField<Domain_Attribute> {
        &mut self.attribute
    }

    // Take field
    pub fn take_attribute(&mut self) -> ::protobuf::RepeatedField<Domain_Attribute> {
        ::std::mem::replace(&mut self.attribute, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Domain {
    fn is_initialized(&self) -> bool {
        for v in &self.attribute {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attribute)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != Domain_Type::Plain {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        for value in &self.attribute {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != Domain_Type::Plain {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        for v in &self.attribute {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Domain {
        Domain::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Domain_Type>>(
                "type",
                |m: &Domain| { &m.field_type },
                |m: &mut Domain| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &Domain| { &m.value },
                |m: &mut Domain| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Domain_Attribute>>(
                "attribute",
                |m: &Domain| { &m.attribute },
                |m: &mut Domain| { &mut m.attribute },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Domain>(
                "Domain",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Domain {
        static instance: ::protobuf::rt::LazyV2<Domain> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Domain::new)
    }
}

impl ::protobuf::Clear for Domain {
    fn clear(&mut self) {
        self.field_type = Domain_Type::Plain;
        self.value.clear();
        self.attribute.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Domain {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Domain {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Domain_Attribute {
    // message fields
    pub key: ::std::string::String,
    // message oneof groups
    pub typed_value: ::std::option::Option<Domain_Attribute_oneof_typed_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Domain_Attribute {
    fn default() -> &'a Domain_Attribute {
        <Domain_Attribute as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Domain_Attribute_oneof_typed_value {
    bool_value(bool),
    int_value(i64),
}

impl Domain_Attribute {
    pub fn new() -> Domain_Attribute {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // bool bool_value = 2;


    pub fn get_bool_value(&self) -> bool {
        match self.typed_value {
            ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::bool_value(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool_value(&mut self) {
        self.typed_value = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        match self.typed_value {
            ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::bool_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.typed_value = ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::bool_value(v))
    }

    // int64 int_value = 3;


    pub fn get_int_value(&self) -> i64 {
        match self.typed_value {
            ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::int_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_int_value(&mut self) {
        self.typed_value = ::std::option::Option::None;
    }

    pub fn has_int_value(&self) -> bool {
        match self.typed_value {
            ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::int_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int_value(&mut self, v: i64) {
        self.typed_value = ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::int_value(v))
    }
}

impl ::protobuf::Message for Domain_Attribute {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.typed_value = ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::bool_value(is.read_bool()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.typed_value = ::std::option::Option::Some(Domain_Attribute_oneof_typed_value::int_value(is.read_int64()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if let ::std::option::Option::Some(ref v) = self.typed_value {
            match v {
                &Domain_Attribute_oneof_typed_value::bool_value(v) => {
                    my_size += 2;
                },
                &Domain_Attribute_oneof_typed_value::int_value(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if let ::std::option::Option::Some(ref v) = self.typed_value {
            match v {
                &Domain_Attribute_oneof_typed_value::bool_value(v) => {
                    os.write_bool(2, v)?;
                },
                &Domain_Attribute_oneof_typed_value::int_value(v) => {
                    os.write_int64(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Domain_Attribute {
        Domain_Attribute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Domain_Attribute| { &m.key },
                |m: &mut Domain_Attribute| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "bool_value",
                Domain_Attribute::has_bool_value,
                Domain_Attribute::get_bool_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "int_value",
                Domain_Attribute::has_int_value,
                Domain_Attribute::get_int_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Domain_Attribute>(
                "Domain.Attribute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Domain_Attribute {
        static instance: ::protobuf::rt::LazyV2<Domain_Attribute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Domain_Attribute::new)
    }
}

impl ::protobuf::Clear for Domain_Attribute {
    fn clear(&mut self) {
        self.key.clear();
        self.typed_value = ::std::option::Option::None;
        self.typed_value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Domain_Attribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Domain_Attribute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Domain_Type {
    Plain = 0,
    Regex = 1,
    Domain = 2,
    Full = 3,
}

impl ::protobuf::ProtobufEnum for Domain_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Domain_Type> {
        match value {
            0 => ::std::option::Option::Some(Domain_Type::Plain),
            1 => ::std::option::Option::Some(Domain_Type::Regex),
            2 => ::std::option::Option::Some(Domain_Type::Domain),
            3 => ::std::option::Option::Some(Domain_Type::Full),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Domain_Type] = &[
            Domain_Type::Plain,
            Domain_Type::Regex,
            Domain_Type::Domain,
            Domain_Type::Full,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Domain_Type>("Domain.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Domain_Type {
}

impl ::std::default::Default for Domain_Type {
    fn default() -> Self {
        Domain_Type::Plain
    }
}

impl ::protobuf::reflect::ProtobufValue for Domain_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CIDR {
    // message fields
    pub ip: ::std::vec::Vec<u8>,
    pub prefix: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CIDR {
    fn default() -> &'a CIDR {
        <CIDR as ::protobuf::Message>::default_instance()
    }
}

impl CIDR {
    pub fn new() -> CIDR {
        ::std::default::Default::default()
    }

    // bytes ip = 1;


    pub fn get_ip(&self) -> &[u8] {
        &self.ip
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::vec::Vec<u8>) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ip, ::std::vec::Vec::new())
    }

    // uint32 prefix = 2;


    pub fn get_prefix(&self) -> u32 {
        self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix = 0;
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: u32) {
        self.prefix = v;
    }
}

impl ::protobuf::Message for CIDR {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ip)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.prefix = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.ip);
        }
        if self.prefix != 0 {
            my_size += ::protobuf::rt::value_size(2, self.prefix, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ip.is_empty() {
            os.write_bytes(1, &self.ip)?;
        }
        if self.prefix != 0 {
            os.write_uint32(2, self.prefix)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CIDR {
        CIDR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ip",
                |m: &CIDR| { &m.ip },
                |m: &mut CIDR| { &mut m.ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "prefix",
                |m: &CIDR| { &m.prefix },
                |m: &mut CIDR| { &mut m.prefix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CIDR>(
                "CIDR",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CIDR {
        static instance: ::protobuf::rt::LazyV2<CIDR> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CIDR::new)
    }
}

impl ::protobuf::Clear for CIDR {
    fn clear(&mut self) {
        self.ip.clear();
        self.prefix = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CIDR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CIDR {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GeoIP {
    // message fields
    pub country_code: ::std::string::String,
    pub cidr: ::protobuf::RepeatedField<CIDR>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeoIP {
    fn default() -> &'a GeoIP {
        <GeoIP as ::protobuf::Message>::default_instance()
    }
}

impl GeoIP {
    pub fn new() -> GeoIP {
        ::std::default::Default::default()
    }

    // string country_code = 1;


    pub fn get_country_code(&self) -> &str {
        &self.country_code
    }
    pub fn clear_country_code(&mut self) {
        self.country_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        &mut self.country_code
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country_code, ::std::string::String::new())
    }

    // repeated .v2ray.core.app.router.CIDR cidr = 2;


    pub fn get_cidr(&self) -> &[CIDR] {
        &self.cidr
    }
    pub fn clear_cidr(&mut self) {
        self.cidr.clear();
    }

    // Param is passed by value, moved
    pub fn set_cidr(&mut self, v: ::protobuf::RepeatedField<CIDR>) {
        self.cidr = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cidr(&mut self) -> &mut ::protobuf::RepeatedField<CIDR> {
        &mut self.cidr
    }

    // Take field
    pub fn take_cidr(&mut self) -> ::protobuf::RepeatedField<CIDR> {
        ::std::mem::replace(&mut self.cidr, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GeoIP {
    fn is_initialized(&self) -> bool {
        for v in &self.cidr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.country_code)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cidr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.country_code);
        }
        for value in &self.cidr {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.country_code.is_empty() {
            os.write_string(1, &self.country_code)?;
        }
        for v in &self.cidr {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeoIP {
        GeoIP::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country_code",
                |m: &GeoIP| { &m.country_code },
                |m: &mut GeoIP| { &mut m.country_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CIDR>>(
                "cidr",
                |m: &GeoIP| { &m.cidr },
                |m: &mut GeoIP| { &mut m.cidr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GeoIP>(
                "GeoIP",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GeoIP {
        static instance: ::protobuf::rt::LazyV2<GeoIP> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GeoIP::new)
    }
}

impl ::protobuf::Clear for GeoIP {
    fn clear(&mut self) {
        self.country_code.clear();
        self.cidr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeoIP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeoIP {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GeoIPList {
    // message fields
    pub entry: ::protobuf::RepeatedField<GeoIP>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeoIPList {
    fn default() -> &'a GeoIPList {
        <GeoIPList as ::protobuf::Message>::default_instance()
    }
}

impl GeoIPList {
    pub fn new() -> GeoIPList {
        ::std::default::Default::default()
    }

    // repeated .v2ray.core.app.router.GeoIP entry = 1;


    pub fn get_entry(&self) -> &[GeoIP] {
        &self.entry
    }
    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: ::protobuf::RepeatedField<GeoIP>) {
        self.entry = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entry(&mut self) -> &mut ::protobuf::RepeatedField<GeoIP> {
        &mut self.entry
    }

    // Take field
    pub fn take_entry(&mut self) -> ::protobuf::RepeatedField<GeoIP> {
        ::std::mem::replace(&mut self.entry, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GeoIPList {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entry {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entry {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeoIPList {
        GeoIPList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GeoIP>>(
                "entry",
                |m: &GeoIPList| { &m.entry },
                |m: &mut GeoIPList| { &mut m.entry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GeoIPList>(
                "GeoIPList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GeoIPList {
        static instance: ::protobuf::rt::LazyV2<GeoIPList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GeoIPList::new)
    }
}

impl ::protobuf::Clear for GeoIPList {
    fn clear(&mut self) {
        self.entry.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeoIPList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeoIPList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GeoSite {
    // message fields
    pub country_code: ::std::string::String,
    pub domain: ::protobuf::RepeatedField<Domain>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeoSite {
    fn default() -> &'a GeoSite {
        <GeoSite as ::protobuf::Message>::default_instance()
    }
}

impl GeoSite {
    pub fn new() -> GeoSite {
        ::std::default::Default::default()
    }

    // string country_code = 1;


    pub fn get_country_code(&self) -> &str {
        &self.country_code
    }
    pub fn clear_country_code(&mut self) {
        self.country_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_country_code(&mut self, v: ::std::string::String) {
        self.country_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country_code(&mut self) -> &mut ::std::string::String {
        &mut self.country_code
    }

    // Take field
    pub fn take_country_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.country_code, ::std::string::String::new())
    }

    // repeated .v2ray.core.app.router.Domain domain = 2;


    pub fn get_domain(&self) -> &[Domain] {
        &self.domain
    }
    pub fn clear_domain(&mut self) {
        self.domain.clear();
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::protobuf::RepeatedField<Domain>) {
        self.domain = v;
    }

    // Mutable pointer to the field.
    pub fn mut_domain(&mut self) -> &mut ::protobuf::RepeatedField<Domain> {
        &mut self.domain
    }

    // Take field
    pub fn take_domain(&mut self) -> ::protobuf::RepeatedField<Domain> {
        ::std::mem::replace(&mut self.domain, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GeoSite {
    fn is_initialized(&self) -> bool {
        for v in &self.domain {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.country_code)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.domain)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.country_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.country_code);
        }
        for value in &self.domain {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.country_code.is_empty() {
            os.write_string(1, &self.country_code)?;
        }
        for v in &self.domain {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeoSite {
        GeoSite::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "country_code",
                |m: &GeoSite| { &m.country_code },
                |m: &mut GeoSite| { &mut m.country_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Domain>>(
                "domain",
                |m: &GeoSite| { &m.domain },
                |m: &mut GeoSite| { &mut m.domain },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GeoSite>(
                "GeoSite",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GeoSite {
        static instance: ::protobuf::rt::LazyV2<GeoSite> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GeoSite::new)
    }
}

impl ::protobuf::Clear for GeoSite {
    fn clear(&mut self) {
        self.country_code.clear();
        self.domain.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeoSite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeoSite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GeoSiteList {
    // message fields
    pub entry: ::protobuf::RepeatedField<GeoSite>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeoSiteList {
    fn default() -> &'a GeoSiteList {
        <GeoSiteList as ::protobuf::Message>::default_instance()
    }
}

impl GeoSiteList {
    pub fn new() -> GeoSiteList {
        ::std::default::Default::default()
    }

    // repeated .v2ray.core.app.router.GeoSite entry = 1;


    pub fn get_entry(&self) -> &[GeoSite] {
        &self.entry
    }
    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: ::protobuf::RepeatedField<GeoSite>) {
        self.entry = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entry(&mut self) -> &mut ::protobuf::RepeatedField<GeoSite> {
        &mut self.entry
    }

    // Take field
    pub fn take_entry(&mut self) -> ::protobuf::RepeatedField<GeoSite> {
        ::std::mem::replace(&mut self.entry, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GeoSiteList {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entry {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entry {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeoSiteList {
        GeoSiteList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GeoSite>>(
                "entry",
                |m: &GeoSiteList| { &m.entry },
                |m: &mut GeoSiteList| { &mut m.entry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GeoSiteList>(
                "GeoSiteList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GeoSiteList {
        static instance: ::protobuf::rt::LazyV2<GeoSiteList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GeoSiteList::new)
    }
}

impl ::protobuf::Clear for GeoSiteList {
    fn clear(&mut self) {
        self.entry.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeoSiteList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeoSiteList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cconfig.proto\x12\x15v2ray.core.app.router\"\xd1\x02\n\x06Domain\
    \x128\n\x04type\x18\x01\x20\x01(\x0e2\".v2ray.core.app.router.Domain.Typ\
    eR\x04typeB\0\x12\x16\n\x05value\x18\x02\x20\x01(\tR\x05valueB\0\x12G\n\
    \tattribute\x18\x03\x20\x03(\x0b2'.v2ray.core.app.router.Domain.Attribut\
    eR\tattributeB\0\x1at\n\tAttribute\x12\x12\n\x03key\x18\x01\x20\x01(\tR\
    \x03keyB\0\x12!\n\nbool_value\x18\x02\x20\x01(\x08H\0R\tboolValueB\0\x12\
    \x1f\n\tint_value\x18\x03\x20\x01(\x03H\0R\x08intValueB\0B\r\n\x0btyped_\
    value:\0\"4\n\x04Type\x12\t\n\x05Plain\x10\0\x12\t\n\x05Regex\x10\x01\
    \x12\n\n\x06Domain\x10\x02\x12\x08\n\x04Full\x10\x03\x1a\0:\0\"4\n\x04CI\
    DR\x12\x10\n\x02ip\x18\x01\x20\x01(\x0cR\x02ipB\0\x12\x18\n\x06prefix\
    \x18\x02\x20\x01(\rR\x06prefixB\0:\0\"a\n\x05GeoIP\x12#\n\x0ccountry_cod\
    e\x18\x01\x20\x01(\tR\x0bcountryCodeB\0\x121\n\x04cidr\x18\x02\x20\x03(\
    \x0b2\x1b.v2ray.core.app.router.CIDRR\x04cidrB\0:\0\"C\n\tGeoIPList\x124\
    \n\x05entry\x18\x01\x20\x03(\x0b2\x1c.v2ray.core.app.router.GeoIPR\x05en\
    tryB\0:\0\"i\n\x07GeoSite\x12#\n\x0ccountry_code\x18\x01\x20\x01(\tR\x0b\
    countryCodeB\0\x127\n\x06domain\x18\x02\x20\x03(\x0b2\x1d.v2ray.core.app\
    .router.DomainR\x06domainB\0:\0\"G\n\x0bGeoSiteList\x126\n\x05entry\x18\
    \x01\x20\x03(\x0b2\x1e.v2ray.core.app.router.GeoSiteR\x05entryB\0:\0B\0b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
